{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { jwtDecode } from \"jwt-decode\";\n\n//   const TweetComposer = () => {\n//   const [tweetContent, setTweetContent] = useState(\"\");\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [tweets, setTweets] = useState([]);\n\n//   useEffect(() => {\n//     fetchTweets();\n//   }, []);\n\n//   const fetchTweets = async () => {\n//     try {\n//       const response = await axios.get(\"http://127.0.0.1:8000/tweets/\");\n//       const tweetsWithDefaults = response.data.map(tweet => ({\n//         ...tweet,\n//         likes: tweet.likes || 0,\n//         dislikes: tweet.dislikes || 0\n//       }));\n//       setTweets(tweetsWithDefaults);\n//     } catch (error) {\n//       console.error(\"Error fetching tweets:\", error);\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setLoading(true);\n//     setError(null);\n\n//     const handleSubmit = async (e) => {\n//       e.preventDefault();\n//       setLoading(true);\n//       setError(null);\n\n//       try {\n//         const response = await axios.post(\"http://127.0.0.1:8000/tweets/\", {\n//           content: tweetContent,\n//           user: 1 // Assuming 1 is the ID of the authenticated user, you can replace it with the actual user ID\n//         });\n//         console.log(\"Tweet created:\", response.data);\n//         setTweets([...tweets, { ...response.data, likes: 0, dislikes: 0 }]);\n//       } catch (error) {\n//         console.error(\"Error creating tweet:\", error);\n//         setError(\"An error occurred while creating the tweet.\");\n//       } finally {\n//         setLoading(false);\n//         setTweetContent(\"\");\n//       }\n//     };\n\n//   const handleInputChange = (e) => {\n//     setTweetContent(e.target.value);\n//   };\n\n//   const handleLikeButtonClick = (tweetId) => {\n//     const updatedTweets = tweets.map(tweet => {\n//       if (tweet.id === tweetId) {\n//         return { ...tweet, isLiked: !tweet.isLiked, likes: tweet.likes + 1 };}\n//       return tweet;\n//     });\n//     setTweets(updatedTweets);\n//   };\n\n//   const handleDislikeButtonClick = (tweetId) => {\n//     const updatedTweets = tweets.map(tweet => {\n//       if (tweet.id === tweetId) {\n//         return { ...tweet, isDisliked: !tweet.isDisliked, dislikes: tweet.dislikes + 1 };\n//       }\n//       return tweet;\n//     });\n//     setTweets(updatedTweets);\n//   };\n\n//   const handleDeleteTweet = async (tweetId) => {\n//     try {\n//       const response = await axios.delete(`http://localhost:8000/tweets/${tweetId}/`);\n//       console.log(response.data);\n//       console.log(`Deleted tweet with ID ${tweetId}`);\n//       await fetchTweets();\n//     } catch (error) {\n//       console.error('Error deleting tweet:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"tweet\">\n//       <h2>Compose a Tweet</h2>\n//       <form onSubmit={handleSubmit}>\n//         <textarea\n//           value={tweetContent}\n//           onChange={handleInputChange}\n//           placeholder=\"What's happening?\"\n//           rows={4}\n//           cols={50}\n//           disabled={loading}\n//         />\n//         <button className=\"post\" type=\"submit\" disabled={loading}>\n//           {loading ? \"Posting...\" : \"Post\"}\n//         </button>\n//       </form>\n//       {error && <p>{error}</p>}\n//       <h2>Tweets</h2>\n//       <ul>\n//         {tweets.map((tweet) => (\n//           <li key={tweet.id}>\n//             <div>\n//               <span>{tweet.content}</span>\n//               <button onClick={() => handleLikeButtonClick(tweet.id)}>\n//                 <i className=\"fa fa-thumbs-up\">{tweet.likes}</i>\n//               </button>\n//               <button onClick={() => handleDislikeButtonClick(tweet.id)}>\n//                 <i className=\"fa fa-thumbs-down\">{tweet.dislikes}</i>\n//               </button>\n//               <button onClick={() => handleDeleteTweet(tweet.id)}>\n//                 <i className=\"fa fa-trash\"></i>\n//               </button>\n//             </div>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default TweetComposer;","map":{"version":3,"names":[],"sources":["/home/junaid_dev/djangoproj/frontend/src/components/TweetComposer.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { jwtDecode } from \"jwt-decode\";\n\n//   const TweetComposer = () => {\n//   const [tweetContent, setTweetContent] = useState(\"\");\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [tweets, setTweets] = useState([]);\n\n//   useEffect(() => {\n//     fetchTweets();\n//   }, []);\n\n//   const fetchTweets = async () => {\n//     try {\n//       const response = await axios.get(\"http://127.0.0.1:8000/tweets/\");\n//       const tweetsWithDefaults = response.data.map(tweet => ({\n//         ...tweet,\n//         likes: tweet.likes || 0,\n//         dislikes: tweet.dislikes || 0\n//       }));\n//       setTweets(tweetsWithDefaults);\n//     } catch (error) {\n//       console.error(\"Error fetching tweets:\", error);\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setLoading(true);\n//     setError(null);\n\n//     const handleSubmit = async (e) => {\n//       e.preventDefault();\n//       setLoading(true);\n//       setError(null);\n    \n//       try {\n//         const response = await axios.post(\"http://127.0.0.1:8000/tweets/\", {\n//           content: tweetContent,\n//           user: 1 // Assuming 1 is the ID of the authenticated user, you can replace it with the actual user ID\n//         });\n//         console.log(\"Tweet created:\", response.data);\n//         setTweets([...tweets, { ...response.data, likes: 0, dislikes: 0 }]);\n//       } catch (error) {\n//         console.error(\"Error creating tweet:\", error);\n//         setError(\"An error occurred while creating the tweet.\");\n//       } finally {\n//         setLoading(false);\n//         setTweetContent(\"\");\n//       }\n//     };\n\n//   const handleInputChange = (e) => {\n//     setTweetContent(e.target.value);\n//   };\n\n//   const handleLikeButtonClick = (tweetId) => {\n//     const updatedTweets = tweets.map(tweet => {\n//       if (tweet.id === tweetId) {\n//         return { ...tweet, isLiked: !tweet.isLiked, likes: tweet.likes + 1 };}\n//       return tweet;\n//     });\n//     setTweets(updatedTweets);\n//   };\n\n//   const handleDislikeButtonClick = (tweetId) => {\n//     const updatedTweets = tweets.map(tweet => {\n//       if (tweet.id === tweetId) {\n//         return { ...tweet, isDisliked: !tweet.isDisliked, dislikes: tweet.dislikes + 1 };\n//       }\n//       return tweet;\n//     });\n//     setTweets(updatedTweets);\n//   };\n\n//   const handleDeleteTweet = async (tweetId) => {\n//     try {\n//       const response = await axios.delete(`http://localhost:8000/tweets/${tweetId}/`);\n//       console.log(response.data);\n//       console.log(`Deleted tweet with ID ${tweetId}`);\n//       await fetchTweets();\n//     } catch (error) {\n//       console.error('Error deleting tweet:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"tweet\">\n//       <h2>Compose a Tweet</h2>\n//       <form onSubmit={handleSubmit}>\n//         <textarea\n//           value={tweetContent}\n//           onChange={handleInputChange}\n//           placeholder=\"What's happening?\"\n//           rows={4}\n//           cols={50}\n//           disabled={loading}\n//         />\n//         <button className=\"post\" type=\"submit\" disabled={loading}>\n//           {loading ? \"Posting...\" : \"Post\"}\n//         </button>\n//       </form>\n//       {error && <p>{error}</p>}\n//       <h2>Tweets</h2>\n//       <ul>\n//         {tweets.map((tweet) => (\n//           <li key={tweet.id}>\n//             <div>\n//               <span>{tweet.content}</span>\n//               <button onClick={() => handleLikeButtonClick(tweet.id)}>\n//                 <i className=\"fa fa-thumbs-up\">{tweet.likes}</i>\n//               </button>\n//               <button onClick={() => handleDislikeButtonClick(tweet.id)}>\n//                 <i className=\"fa fa-thumbs-down\">{tweet.dislikes}</i>\n//               </button>\n//               <button onClick={() => handleDeleteTweet(tweet.id)}>\n//                 <i className=\"fa fa-trash\"></i>\n//               </button>\n//             </div>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default TweetComposer;\n\n\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}